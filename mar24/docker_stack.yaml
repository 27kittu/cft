AWSTemplateFormatVersion: 2010-09-09
Description: This template creates all the infrastructure for Docker Swarm including security groups in a ready-to-use manner
Parameters:
  VpcCidrBlock:
    Type: String
    Description: Cidrblock to assign to the VPC
    Default: 10.0.0.0/24
  KeyPair:
    Type: AWS::EC2::KeyPair::KeyName
    Description: Name of the existing keypair
    Default: success
Resources:
  SwarmVpc:
    Type: AWS::EC2::VPC
    Description: VPC dedicated for Docker Swarm
    Properties: 
      CidrBlock: !Ref VpcCidrBlock
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: swarm
  SwarmPubSubnet1:
    Type: AWS::EC2::Subnet
    Description: Public Subnet for Docker server placement
    Properties:
      VpcId: !Ref SwarmVpc
      CidrBlock: 10.0.0.0/26
      MapPublicIpOnLaunch: true
#      AvailabilityZone: us-east-1a
      Tags:
        - Key: Name
          Value: swarm
  SwarmPubSubnet2:
    Type: AWS::EC2::Subnet
    Description: Public Subnet for Docker server placement
    Properties:
      VpcId: !Ref SwarmVpc
      CidrBlock: 10.0.0.64/26
      MapPublicIpOnLaunch: true
#      AvailabilityZone: us-east-1a
      Tags:
        - Key: Name
          Value: swarm
  SwarmPubSubnet3:
    Type: AWS::EC2::Subnet
    Description: Public Subnet for Docker server placement
    Properties:
      VpcId: !Ref SwarmVpc
      CidrBlock: 10.0.0.128/26
      MapPublicIpOnLaunch: true
#      AvailabilityZone: us-east-1a #ap-south-1b
      Tags:
        - Key: Name
          Value: swarm
  SwarmPubSubnet4:
    Type: AWS::EC2::Subnet
    Description: Public Subnet for Swarm server placement
    Properties:
      VpcId: !Ref SwarmVpc
      CidrBlock: 10.0.0.192/26
      MapPublicIpOnLaunch: true
#      AvailabilityZone: us-east-1a #ap-south-1b
      Tags:
        - Key: Name
          Value: swarm
  EC2SecurityGroup:
    Type: "AWS::EC2::SecurityGroup"
    Properties:
      GroupDescription: "Ingress allowed for all"
      GroupName: "ingress1"
      VpcId: !Ref SwarmVpc
      SecurityGroupIngress: 
        - 
          CidrIp: "0.0.0.0/0"
          IpProtocol: "-1"
      SecurityGroupEgress: 
        - 
          CidrIp: "0.0.0.0/0"
          IpProtocol: "-1"
  #SecurityGroup1:
  #  Type: 'AWS::EC2::SecurityGroup'
   # Properties:
   #   GroupDescription: Allow connections from specified source security group
  #SGroupIngress:
  #  Type: AWS::EC2::SecurityGroupIngress
    #Properties:
     # - IpProtocol: '-1'
      #  FromPort: '0'
       ## ToPort: '65535'
        #SourceSecurityGroupName: !Ref SecurityGroup1
        #SourceSecurityGroupOwnerId: '654654506058'
#  SecurityGroup2:
 #   Type: 'AWS::EC2::SecurityGroup'
  #  Properties:
   #   GroupDescription: Allow connections from specified source security group
    #  SecurityGroupIngress:
     # - IpProtocol: '-1'
      #  FromPort: '0'
       # ToPort: '65535'
        #CidrIp: 0.0.0.0/0
  SwarmInternetGw:
    Type: AWS::EC2::InternetGateway
    Description: Internet gateway for the VPC
    Properties:
      Tags:
        - Key: Name
          Value: swarm
  VpcToInternet:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref SwarmVpc
      InternetGatewayId: !Ref SwarmInternetGw
  SwarmPubRt:
    Type: AWS::EC2::RouteTable
    Description: RouteTable for SwarmVpc
    Properties: 
      VpcId: !Ref SwarmVpc
  SwarmPubRou1:
    Type: AWS::EC2::Route
    Description: Route from Vpc to InternetGw
    DependsOn:
      - SwarmInternetGw
    Properties:
      RouteTableId: !Ref SwarmPubRt
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref SwarmInternetGw
  SwarmPubSubnetAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Description: Route from Vpc to subnet1
    Properties:
      SubnetId: !Ref SwarmPubSubnet1
      RouteTableId: !Ref SwarmPubRt
  SwarmMaster:
    Type: AWS::EC2::Instance
    Description: Swarm Master instance in Public subnet
    Properties:
      InstanceType: t2.micro
      ImageId: ami-080e1f13689e07408 
      KeyName: !Ref KeyPair
      SubnetId: !Ref SwarmPubSubnet1
      SecurityGroupIds:
        - !Ref EC2SecurityGroup
      SourceDestCheck: true
      Tags:
        - Key: Name
          Value: doc0_ans0
        - Key: label
          Value: swarm
      UserData:
        Fn::Base64: |
          #!/bin/bash
          #Configure 'ansible' user
          apt update -y
          apt install -y vim zip tar wget git net-tools curl docker.io python-is-python3 python3-pip virtualenv
          #changing vim default colorscheme
          cat > /etc/vim/vimrc <<eof
          syntax enable
          colorscheme ron
          autocmd FileType yaml setlocal ts=2 sts=2 sw=2 expandtab
          eof
          # configuring ansible
          username="ansible"
          password="ubuntu@user"
          adduser --gecos "" --disabled-password $username
          echo "${username}:${password}" | chpasswd
          # adding visudo file
          cp /etc/sudoers /etc/sudoers_copy
          sed -i 's/^root.*ALL$/root    ALL=(ALL:ALL) ALL\nansible ALL=(ALL)     NOPASSWD: ALL/' /etc/sudoers
          # changing Password authentication
          cp /etc/ssh/sshd_config /etc/ssh/sshd_config.bak
          sed -i 's/#PasswordAuthentication yes/PasswordAuthentication yes/g' /etc/ssh/sshd_config && sed -i 's/PasswordAuthentication no/PasswordAuthentication yes/g' /etc/ssh/sshd_config
          # restart sshd service
          systemctl restart sshd
  
  Swarm1:
    Type: AWS::EC2::Instance
    Description: Swarm Master instance in Public subnet
    Properties:
      InstanceType: t2.micro
      ImageId: ami-080e1f13689e07408 
      KeyName: !Ref KeyPair
      SubnetId: !Ref SwarmPubSubnet1
      SecurityGroupIds:
        - !Ref EC2SecurityGroup
      SourceDestCheck: true
      Tags:
        - Key: Name
          Value: doc1_ans1
        - Key: label
          Value: swarm
      UserData:
        Fn::Base64: |
          #!/bin/bash
          #Configure 'ansible' user
          apt update -y
          apt install -y vim zip tar wget git net-tools curl docker.io python-is-python3 
          #changing vim default colorscheme
          cat > /etc/vim/vimrc <<eof
          syntax enable
          colorscheme ron
          autocmd FileType yaml setlocal ts=2 sts=2 sw=2 expandtab
          eof
          # configuring ansible
          username="ansible"
          password="ubuntu@user"
          adduser --gecos "" --disabled-password $username
          echo "${username}:${password}" | chpasswd
          # adding visudo file
          cp /etc/sudoers /etc/sudoers_copy
          sed -i 's/^root.*ALL$/root    ALL=(ALL:ALL) ALL\nansible ALL=(ALL)     NOPASSWD: ALL/' /etc/sudoers
          # changing Password authentication
          cp /etc/ssh/sshd_config /etc/ssh/sshd_config.bak
          sed -i 's/#PasswordAuthentication yes/PasswordAuthentication yes/g' /etc/ssh/sshd_config && sed -i 's/PasswordAuthentication no/PasswordAuthentication yes/g' /etc/ssh/sshd_config
          # restart sshd service
          systemctl restart sshd

  Swarm2:
    Type: AWS::EC2::Instance
    Description: Swarm Master instance in Public subnet
    Properties:
      InstanceType: t2.micro
      ImageId: ami-080e1f13689e07408 
      KeyName: !Ref KeyPair
      SubnetId: !Ref SwarmPubSubnet1
      SecurityGroupIds:
        - !Ref EC2SecurityGroup
      SourceDestCheck: true
      Tags:
        - Key: Name
          Value: doc2_ans2
        - Key: label
          Value: swarm
      UserData:
        Fn::Base64: |
          #!/bin/bash
          #Configure 'ansible' user
          apt update -y
          apt install -y vim zip tar wget git net-tools curl docker.io python-is-python3
          #changing vim default colorscheme
          cat > /etc/vim/vimrc <<eof
          syntax enable
          colorscheme ron
          autocmd FileType yaml setlocal ts=2 sts=2 sw=2 expandtab
          eof
          # configuring ansible
          username="ansible"
          password="ubuntu@user"
          adduser --gecos "" --disabled-password $username
          echo "${username}:${password}" | chpasswd
          # adding visudo file
          cp /etc/sudoers /etc/sudoers_copy
          sed -i 's/^root.*ALL$/root    ALL=(ALL:ALL) ALL\nansible ALL=(ALL)     NOPASSWD: ALL/' /etc/sudoers
          # changing Password authentication
          cp /etc/ssh/sshd_config /etc/ssh/sshd_config.bak
          sed -i 's/#PasswordAuthentication yes/PasswordAuthentication yes/g' /etc/ssh/sshd_config && sed -i 's/PasswordAuthentication no/PasswordAuthentication yes/g' /etc/ssh/sshd_config
          # restart sshd service
          systemctl restart sshd

